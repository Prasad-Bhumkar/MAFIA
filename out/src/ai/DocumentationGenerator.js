"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentationGenerator = void 0;
const vscode = __importStar(require("vscode"));
const path = __importStar(require("path"));
const AIServiceV2_1 = require("./AIServiceV2");
const FileParserUtils_1 = require("../utils/FileParserUtils");
const ErrorHandler_1 = require("../utils/ErrorHandler");
class DocumentationGenerator {
    constructor(context) {
        this.aiService = AIServiceV2_1.AIServiceV2.getInstance(context);
        this.parser = new FileParserUtils_1.FileParserUtils();
    }
    static getInstance(context) {
        if (!DocumentationGenerator.instance) {
            DocumentationGenerator.instance = new DocumentationGenerator(context);
        }
        return DocumentationGenerator.instance;
    }
    async generateDocumentation(document) {
        try {
            // Parse code structure and extract existing docs
            const codeStructure = await this.parser.parseDocument(document);
            // Generate documentation for undocumented sections
            const aiResponse = await this.aiService.getEnhancedSuggestions({
                context: codeStructure,
                language: this.getLanguageId(document.languageId),
                cursorPosition: new vscode.Position(0, 0),
                document,
                prompt: 'Generate comprehensive documentation for this code'
            });
            return this.formatDocumentation(aiResponse.suggestions[0], codeStructure);
        }
        catch (error) {
            ErrorHandler_1.ErrorHandler.handle(error, 'Documentation Generation');
            throw error;
        }
    }
    getLanguageId(vscodeLanguageId) {
        const mapping = {
            'java': 'java',
            'typescript': 'typescript',
            'javascript': 'typescript',
            'python': 'python',
            'go': 'go',
            'rust': 'rust'
        };
        return mapping[vscodeLanguageId] || 'typescript';
    }
    formatDocumentation(aiContent, codeStructure) {
        const timestamp = new Date().toISOString();
        return `# Code Documentation\n\n` +
            `## Structure Overview\n${codeStructure}\n\n` +
            `## AI-Generated Documentation\n${aiContent}\n\n` +
            `---\n` +
            `*Documentation generated by MAFIA on ${timestamp}*\n` +
            `*This is an AI-generated documentation. Please review for accuracy.*`;
    }
    async exportDocumentation(document, exporter) {
        try {
            const docContent = await this.generateDocumentation(document);
            const fileName = `${path.basename(document.fileName, path.extname(document.fileName))}_docs.md`;
            const choice = await vscode.window.showQuickPick(['Save to file', 'Copy to clipboard', 'Preview'], { placeHolder: 'How would you like to export the documentation?' });
            if (choice === 'Save to file') {
                await exporter.exportToFile(docContent, fileName);
            }
            else if (choice === 'Copy to clipboard') {
                await exporter.exportToClipboard(docContent);
            }
            else if (choice === 'Preview') {
                const panel = vscode.window.createWebviewPanel('documentationPreview', 'Documentation Preview', vscode.ViewColumn.Beside, {});
                panel.webview.html = this.getPreviewHtml(docContent);
            }
        }
        catch (error) {
            ErrorHandler_1.ErrorHandler.handle(error, 'Documentation Export');
            throw error;
        }
    }
    getPreviewHtml(content) {
        const marked = require('marked');
        return `<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Documentation Preview</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        pre { background: #f5f5f5; padding: 10px; border-radius: 3px; }
        code { font-family: Consolas, monospace; }
    </style>
</head>
<body>
${marked.parse(content)}
</body>
</html>`;
    }
}
exports.DocumentationGenerator = DocumentationGenerator;
//# sourceMappingURL=DocumentationGenerator.js.map